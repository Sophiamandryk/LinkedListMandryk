
#SIMPLE

class Node():
    def __init__(self, data, next = None):
        self.data = data
        self.next = next

def stringify(node):
    result = []
    while node:
        result.append(str(node.data))
        node = node.next
    result.append("None")
    return " -> ".join(result)
# print(stringify(Node(1, Node(2, Node(3)))))


def linked_list_from_string(s):
    if s.strip() in {"null", "NULL", "nil", "nullptr", "null()"}:
        return None
    nodes = s.split(" -> ")
    nodes.pop()
    head = None
    for value in reversed(nodes):
        head = Node(int(value), head)
    return head
    
def get_nth(node, index):
    count = 0
    current_node = node
    while current_node is not None:
        if count == index:
            return current_node.data
        count += 1
        current_node = current_node.next
        
# head = Node(1, Node(2, Node(3)))
# print(get_nth(head, 2))



class Context(object):
    def __init__(self, source, dest):
        self.source = source
        self.dest = dest
    
def move_node(source, dest):
    if source is None:
        raise ValueError("Source list is empty")
    node_to_move = source
    source = source.next
    node_to_move.next = dest
    return Context(source, node_to_move)

#MIDDLE

#duplicates
def remove_duplicates(head):
    if not head:
        return None 
    current = head
    while current and current.next:
        if current.data == current.next.data:
            current.next = current.next.next
        else:
            current = current.next   
    return head
list_head = Node(1, Node(2, Node(3, Node(3, Node(4, Node(4, Node(5)))))))
result = remove_duplicates(list_head)


#recusive
def reverse(head):
    if not head or not head.next:
        return head
    reversed_list = reverse(head.next)
    head.next.next = head
    head.next = None
    
    return reversed_list
# while result:
#     print(result.data, end=" -> " if result.next else " -> None\n")
#     result = result.next